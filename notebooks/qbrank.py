# -*- coding: utf-8 -*-
"""QBRank.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aNAd1vA1j8Y0Ywpjo2NDphqOjzQdWwkJ

# Quarterback Analysis
"""

import pandas as pd
import re
import inspect
import sys

"""## Functions

### Data Extraction
"""

def extract_pfr_table(year, stat_type, table_num=0):
  """
  Extract one table of one season of pro football reference data
  """
  html_path = f"https://www.pro-football-reference.com/years/{year}/{stat_type}.htm"

  # Read statistics table from webpage
  df = pd.read_html(html_path, displayed_only=False)[table_num]
  
  return df

def extract_pfr_all(yr):
  pages = ["passing", "rushing", "passing_advanced"]

  adv_passing_dict = {
      "air_yards": 0,
      "accuracy": 1,
      "pressure": 2,
      "play_type": 3,
  }

  dfs = dict()

  for page in pages:
    if page == "passing_advanced":
      for key in adv_passing_dict:
        dfs[key] = extract_pfr_table(yr, page, table_num = adv_passing_dict[key])
    else:
      dfs[page] = extract_pfr_table(yr, page)

  return dfs

"""### Data Cleaning"""

def fix_team_name(team_orig: str) -> str:
    """
    Remaps team names for teams that moved or are 
    named inconsistently across sources
    Args
      - team_orig: Original team name, string
    Returns
      - team: Remapped team name, string
    """
    
    team_fix_map = {
      "STL" : "LAR",
      "SDG" : "LAC",
      "SD"  : "LAC",
      "GNB" : "GB",
      "TAM" : "TB",
      "KAN" : "KC",
      "NOR" : "NO",
      "NWE" : "NE",
      "SFO" : "SF",
      "JAC" : "JAX",
      "OAK" : "LV",
      "LVR" : "LV",
    }

    if team_orig in team_fix_map.keys():
      team = team_fix_map[team_orig]
    else:
      team = team_orig

    return team

def fix_columns_v1(columns):
  new_columns = []
  for col in columns.values:
    if "Unnamed" in col[0]:
      new_columns.append(col[1])
    else:
      new_columns.append("_".join(col))
  return new_columns

def fix_columns_v2(columns):
  return [col[1] for col in columns.values]

def clean_pfr_general(df):
  df.columns = [x.lower() for x in df.columns]
  df = df[df['pos'] == "QB"].reset_index()
  df['player'] = df['player'].apply(lambda x: re.sub("[*+]", "", x))
  df['tm'] = df["tm"].apply(fix_team_name)
  return df

def clean_pfr_passing(df):
  df['pro_bowl'] = df['Player'].apply(lambda x: "Y" if (x.find("*") > 0) else "N")
  df['all_pro'] = df['Player'].apply(lambda x: "Y" if (x.find("+") > 0) else "N")
  df = clean_pfr_general(df)
  df = df[['player', 'tm', 'age', 'pos', 'g', 'gs', 'qbrec', 'cmp',
                'att', 'cmp%', 'yds', 'td', 'td%', 'int', 'int%', '1d', 
                'lng', 'y/a', 'ay/a', 'y/c', 'y/g', 'rate', 'qbr', 'sk', 
                'yds.1', 'sk%', 'ny/a', 'any/a', '4qc', 'gwd', 'pro_bowl', 'all_pro']]
  return df

def clean_pfr_rushing(df):
  df.columns = fix_columns_v1(df.columns)
  df = clean_pfr_general(df)
  df = df[['player', 'tm', 'rushing_att', 'rushing_yds', 'rushing_td',  
           'rushing_1d', 'rushing_lng', 'rushing_y/a', 'rushing_y/g', 'fmb']]
  return df

def clean_pfr_air_yards(df):
  df.columns = fix_columns_v2(df.columns)
  df = clean_pfr_general(df)
  df = df[['player', 'tm', 'iay', 'iay/pa', 'cay', 'cay/cmp', 'cay/pa', 'yac', 'yac/cmp']]
  return df

def clean_pfr_accuracy(df):
  df.columns = fix_columns_v2(df.columns)
  df = clean_pfr_general(df)
  df = df[['player', 'tm', 'bats', 'thawy', 'spikes', 'drops', 'drop%', 'badth', 'bad%', 'ontgt', 'ontgt%']]
  return df

def clean_pfr_pressure(df):
  df.columns = fix_columns_v2(df.columns)
  df = clean_pfr_general(df)
  df = df[['player', 'tm', 'pkttime', 'bltz', 'hrry', 'hits', 'prss', 'prss%', 'scrm', 'yds/scr']]
  return df

def clean_pfr_play_type(df):
  df.columns = fix_columns_v1(df.columns)
  df = clean_pfr_general(df)
  df = df[['player', 'tm', 'rpo_plays', 'rpo_yds', 'rpo_passatt', 'rpo_passyds', 'rpo_rushatt', 'rpo_rushyds', 'playaction_passatt', 'playaction_passyds']]
  return df

def create_clean_func_map():

  prefix = 'clean_pfr_'

  func_map = dict()

  for name, obj in inspect.getmembers(sys.modules[__name__]):
    if (inspect.isfunction(obj) and name.startswith(prefix) and obj.__module__ == __name__):
      key = name.replace(prefix,'')
      func_map[key] = obj
                                      
  return func_map

def clean_pfr_all(dfs):

  clean_dfs = dict()
  func_map = create_clean_func_map()
  for key in dfs.keys():
    clean_dfs[key] = func_map[key](dfs[key])

  return clean_dfs

"""### Merge Data"""

def merge_pfr(dfs):
  merge_df = None

  for key in dfs.keys():

    df = dfs[key]

    if merge_df is None:
      merge_df = df
    else:
      merge_df = merge_df.merge(df, how='left', on = ['player', 'tm'])

    return merge_df

"""## Workflow"""

# Pull data
dfs = extract_pfr_all(2021)

# Clean data
clean_dfs = clean_pfr_all(dfs)

# Combine Data
pfr_merge_df = merge_pfr(clean_dfs)

pfr_merge_df.head(n=5)

"""## TODO
 - Pull Over the cap data
 - pull FO data? (circumvent login wall)
"""